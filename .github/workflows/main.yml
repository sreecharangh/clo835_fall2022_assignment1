name: Deploy to ECR

on:
  push:
    branches:
      - feature1

jobs:
  build_and_test:
    name: Build, Test, and Push Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # If you have a requirements file
          pip install requests  # Install the 'requests' module

      - name: Start Flask application
        run: |
          python app.py &  # Start the application in the background

      - name: Wait for application to start
        run: |
          sleep 5  # Adjust the time as needed to ensure the app has started

      - name: Run unit tests
        run: |
          python -m unittest discover -s . -p "test_*.py"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1

      - name: Build and push Docker image 1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecr1
          IMAGE_TAG: v0.3
          DOCKERFILE_PATH: Dockerfile 
        run: |
          # Docker build
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and push Docker image 2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecr2
          IMAGE_TAG: v0.3
          DOCKERFILE_PATH: Dockerfile_mysql
        run: |
          # Docker build
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Stop Flask application
        run: |
          pkill -f "python app.py"  # Stop the background Flask application
